<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java -局部变量</title>
      <link href="/2019/02/18/3/"/>
      <url>/2019/02/18/3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-局部变量"><a href="#Java-局部变量" class="headerlink" title="Java 局部变量"></a>Java 局部变量</h1><p>局部变量声明在方法、构造方法或者语句块中；<br>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；<br>访问修饰符不能用于局部变量；<br>局部变量只在声明它的方法、构造方法或者语句块中可见；<br>局部变量是在栈上分配的。<br>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。<br>实例 1<br>在以下实例中age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pupAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">      age = age + <span class="number">7</span>;</span><br><span class="line">      System.out.println(<span class="string">"小狗的年龄是: "</span> + age);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Test test = <span class="keyword">new</span> Test();</span><br><span class="line">      test.pupAge();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例编译运行结果如下:</p><p>小狗的年龄是: 7<br>实例 2<br>在下面的例子中 age 变量没有初始化，所以在编译时会出错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pupAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> age;</span><br><span class="line">      age = age + <span class="number">7</span>;</span><br><span class="line">      System.out.println(<span class="string">"小狗的年龄是 : "</span> + age);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Test test = <span class="keyword">new</span> Test();</span><br><span class="line">      test.pupAge();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例编译运行结果如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test.java:<span class="number">4</span>:variable number might not have been initialized</span><br><span class="line">age = age + <span class="number">7</span>;</span><br><span class="line">         ^</span><br><span class="line"><span class="number">1</span> error</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 运算符</title>
      <link href="/2019/02/18/2/"/>
      <url>/2019/02/18/2/</url>
      
        <content type="html"><![CDATA[<h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><table><thead><tr><th>操作符</th><th style="text-align:center">描述</th><th style="text-align:right">例子</th></tr></thead><tbody><tr><td>+</td><td style="text-align:center">加法 - 相加运算符两侧的值</td><td style="text-align:right">A + B 等于 30</td></tr><tr><td>-</td><td style="text-align:center">减法 - 左操作数减去右操作数</td><td style="text-align:right">A – B 等于 -10</td></tr><tr><td>*</td><td style="text-align:center">乘法 - 相乘操作符两侧的值</td><td style="text-align:right">A * B等于200</td></tr><tr><td>/</td><td style="text-align:center">除法 - 左操作数除以右操作数</td><td style="text-align:right">B / A等于2</td></tr><tr><td>％</td><td style="text-align:center">取余 - 左操作数除以右操作数的余数</td><td style="text-align:right">B%A等于0</td></tr><tr><td>++</td><td style="text-align:center">自增: 操作数的值增加1</td><td style="text-align:right">B++ 或 ++B 等于 21（区别详见实列）</td></tr><tr><td>–</td><td style="text-align:center">自减: 操作数的值减少1</td><td style="text-align:right">B– 或 –B 等于 19（区别详见实列）</td></tr></tbody></table><p>实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">     <span class="keyword">int</span> c = <span class="number">25</span>;</span><br><span class="line">     <span class="keyword">int</span> d = <span class="number">25</span>;</span><br><span class="line">     System.out.println(<span class="string">"a + b = "</span> + (a + b) );</span><br><span class="line">     System.out.println(<span class="string">"a - b = "</span> + (a - b) );</span><br><span class="line">     System.out.println(<span class="string">"a * b = "</span> + (a * b) );</span><br><span class="line">     System.out.println(<span class="string">"b / a = "</span> + (b / a) );</span><br><span class="line">     System.out.println(<span class="string">"b % a = "</span> + (b % a) );</span><br><span class="line">     System.out.println(<span class="string">"c % a = "</span> + (c % a) );</span><br><span class="line">     System.out.println(<span class="string">"a++   = "</span> +  (a++) );</span><br><span class="line">     System.out.println(<span class="string">"a--   = "</span> +  (a--) );</span><br><span class="line">     <span class="comment">// 查看  d++ 与 ++d 的不同</span></span><br><span class="line">     System.out.println(<span class="string">"d++   = "</span> +  (d++) );</span><br><span class="line">     System.out.println(<span class="string">"++d   = "</span> +  (++d) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行实例 »<br>以上实例编译运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a + b = 30</span><br><span class="line">a - b = -10</span><br><span class="line">a * b = 200</span><br><span class="line">b / a = 2</span><br><span class="line">b % a = 0</span><br><span class="line">c % a = 5</span><br><span class="line">a++   = 10</span><br><span class="line">a--   = 11</span><br><span class="line">d++   = 25</span><br><span class="line">++d   = 27</span><br></pre></td></tr></table></figure></p><h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><p>1、自增（++）自减（–）运算符是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。</p><p>实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selfAddMinus</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="keyword">int</span> b = ++a;<span class="comment">//自增运算</span></span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> d = --c;<span class="comment">//自减运算</span></span><br><span class="line">        System.out.println(<span class="string">"进行自增运算后的值等于"</span>+b);</span><br><span class="line">        System.out.println(<span class="string">"进行自减运算后的值等于"</span>+d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果为：</p><p>进行自增运算后的值等于4<br>进行自减运算后的值等于2<br>解析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int b = ++a; 拆分运算过程为: a=a+1=4; b=a=4, 最后结果为b=4,a=4</span><br><span class="line"></span><br><span class="line">int d = --c; 拆分运算过程为: c=c-1=2; d=c=2, 最后结果为d=2,c=2</span><br></pre></td></tr></table></figure></p><p>2、前缀自增自减法(++a,–a): 先进行自增或者自减运算，再进行表达式运算。</p><p>3、后缀自增自减法(a++,a–): 先进行表达式运算，再进行自增或者自减运算 实例：</p><p>实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selfAddMinus</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">2</span>*++a;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">2</span>*b++;</span><br><span class="line">        System.out.println(<span class="string">"自增运算符前缀运算后a="</span>+a+<span class="string">",x="</span>+x);</span><br><span class="line">        System.out.println(<span class="string">"自增运算符后缀运算后b="</span>+b+<span class="string">",y="</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果为：</p><p>自增运算符前缀运算后a=6，x=12<br>自增运算符后缀运算后b=6，y=10</p><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><p>下表为Java支持的关系运算符</p><p>表格中的实例整数变量A的值为10，变量B的值为20：</p><table><thead><tr><th>运算符</th><th style="text-align:center">描述</th><th style="text-align:right">例子</th></tr></thead><tbody><tr><td>==</td><td style="text-align:center">检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:right">（A == B）为假(非真)。</td></tr><tr><td>!=</td><td style="text-align:center">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td style="text-align:right">(A != B) 为真。</td></tr><tr><td>&gt;</td><td style="text-align:center">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td style="text-align:right">（A&gt; B）非真。</td></tr><tr><td>&lt;</td><td style="text-align:center">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td style="text-align:right">（A &lt;B）为真。</td></tr><tr><td>&gt;=</td><td style="text-align:center">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td style="text-align:right">（A&gt; = B）为假。</td></tr><tr><td>&lt;=</td><td style="text-align:center">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td style="text-align:right">（A &lt;= B）为真。</td></tr></tbody></table><p>实例<br>下面的简单示例程序演示了关系运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p><p>Test.java 文件代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">     System.out.println(<span class="string">"a == b = "</span> + (a == b) );</span><br><span class="line">     System.out.println(<span class="string">"a != b = "</span> + (a != b) );</span><br><span class="line">     System.out.println(<span class="string">"a &gt; b = "</span> + (a &gt; b) );</span><br><span class="line">     System.out.println(<span class="string">"a &lt; b = "</span> + (a &lt; b) );</span><br><span class="line">     System.out.println(<span class="string">"b &gt;= a = "</span> + (b &gt;= a) );</span><br><span class="line">     System.out.println(<span class="string">"b &lt;= a = "</span> + (b &lt;= a) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上实例编译运行结果如下：</p><p>a == b = false<br>a != b = true<br>a &gt; b = false<br>a &lt; b = true<br>b &gt;= a = true<br>b &lt;= a = false</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java - 浮点类型</title>
      <link href="/2019/02/18/1/"/>
      <url>/2019/02/18/1/</url>
      
        <content type="html"><![CDATA[<p>浮点类型<br>浮点类型是带有小数部分的数据类型，也叫实型。浮点型数据包括单精度浮点型（float）和双精度浮点型（double），代表有小数精度要求的数字。</p><p>单精度浮点型（float）和双精度浮点型（double）之间的区别主要是所占用的内存大小不同，float 类型占用 4 字节的内存空间，double 类型占用 8 字节的内存空间。双精度类型 double 比单精度类型 float 具有更高的精度和更大的表示范围。</p><p>Java 默认的浮点型为 double，例如，11.11 和 1.2345 都是 double 型数值。如果要说明一个 float 类型数值，就需要在其后追加字母 f 或 F，如 11.11f 和 1.2345F 都是 float 类型的常数。</p><p>例如，可以使用如下方式声明 float 类型的变量并赋予初值。<br>float price=12.2f;    //定义float类型并赋予初值</p><p>也可以使用如下的任意一种方式声明 double 类型的变量并赋予初值。<br>double price=12.254d;    //定义double类型的变量并赋予初值<br>或<br>double price=12.254;    //定义double类型的变量并赋予初值</p><p>注意：一个值要能被真正看作 float，它必须以 f（或 F）后缓结束；否则，会被当作 double 值。对 double 值来说，d（或 D）后缓是可选的。<br>例 2<br>假设从 A 地到 B 地路程为 2348.4 米，那么往返 A 和 B 两地需要走多少米？</p><p>由于路径数据为浮点类型，在这里定义一个类型为 double 的变量来存储单程距离，并定义一个 int 类型的变量来存储次数。另外，因为计算得到的值为 float 类型，所以可以定义一个 float 类型的变量来存储总距离。</p><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">double</span> lutu=<span class="number">2348.4</span>;    <span class="comment">//定义double类型的变量，用于存储单程距离</span></span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">2</span>;    <span class="comment">//定义int类型的变量，用于存储次数</span></span><br><span class="line">    <span class="keyword">float</span> total=(<span class="keyword">float</span>)(lutu*<span class="number">2</span>);    <span class="comment">//定义float类型的变量，用于存储总距离</span></span><br><span class="line">    System.out.println(<span class="string">"往返 AB 两地共需要行驶："</span>+total+<span class="string">" 米"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存文件并运行，输出的结果如下：<br>往返 AB 两地共需要行驶：4696.8 米</p><p>该示例中首先定义了一个类型为 double、名称为 lutu 的变量用于存储单程距离，然后定义了一个类型为 int、名称为 num 的变量用于存储经过的次数，最后定义了一个类型为 float、名称为 total 的变量用于存储总距离。</p><p>其实一个 double 类型的数据与一个 int 类型的数据相乘后得到的结果类型为 double，但是由于单程距离乘以次数为一个单精度浮点型（float 类型）的数，因此可以将总距离转换为 float 类型的数据。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/18/hello-world/"/>
      <url>/2019/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
