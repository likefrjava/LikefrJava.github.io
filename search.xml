<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java 运算符</title>
      <link href="/2019/02/18/2/"/>
      <url>/2019/02/18/2/</url>
      
        <content type="html"><![CDATA[<h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>操作符|描述|例子</p><ul><li>|加法 - 相加运算符两侧的值|    A + B 等于 30</li></ul><ul><li>|减法 - 左操作数减去右操作数|    A – B 等于 -10</li></ul><ul><li>|乘法 - 相乘操作符两侧的值|    A * B等于200<br>/    |除法 - 左操作数除以右操作数|    B / A等于2<br>％    |取余 - 左操作数除以右操作数的余数|    B%A等于0<br>++    |自增: 操作数的值增加1|    B++ 或 ++B 等于 21（区别详见下文）<br>–    |自减: 操作数的值减少1|    B– 或 –B 等于 19（区别详见下文）</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java - 浮点类型</title>
      <link href="/2019/02/18/1/"/>
      <url>/2019/02/18/1/</url>
      
        <content type="html"><![CDATA[<p>浮点类型<br>浮点类型是带有小数部分的数据类型，也叫实型。浮点型数据包括单精度浮点型（float）和双精度浮点型（double），代表有小数精度要求的数字。</p><p>单精度浮点型（float）和双精度浮点型（double）之间的区别主要是所占用的内存大小不同，float 类型占用 4 字节的内存空间，double 类型占用 8 字节的内存空间。双精度类型 double 比单精度类型 float 具有更高的精度和更大的表示范围。</p><p>Java 默认的浮点型为 double，例如，11.11 和 1.2345 都是 double 型数值。如果要说明一个 float 类型数值，就需要在其后追加字母 f 或 F，如 11.11f 和 1.2345F 都是 float 类型的常数。</p><p>例如，可以使用如下方式声明 float 类型的变量并赋予初值。<br>float price=12.2f;    //定义float类型并赋予初值</p><p>也可以使用如下的任意一种方式声明 double 类型的变量并赋予初值。<br>double price=12.254d;    //定义double类型的变量并赋予初值<br>或<br>double price=12.254;    //定义double类型的变量并赋予初值</p><p>注意：一个值要能被真正看作 float，它必须以 f（或 F）后缓结束；否则，会被当作 double 值。对 double 值来说，d（或 D）后缓是可选的。<br>例 2<br>假设从 A 地到 B 地路程为 2348.4 米，那么往返 A 和 B 两地需要走多少米？</p><p>由于路径数据为浮点类型，在这里定义一个类型为 double 的变量来存储单程距离，并定义一个 int 类型的变量来存储次数。另外，因为计算得到的值为 float 类型，所以可以定义一个 float 类型的变量来存储总距离。</p><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">double</span> lutu=<span class="number">2348.4</span>;    <span class="comment">//定义double类型的变量，用于存储单程距离</span></span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">2</span>;    <span class="comment">//定义int类型的变量，用于存储次数</span></span><br><span class="line">    <span class="keyword">float</span> total=(<span class="keyword">float</span>)(lutu*<span class="number">2</span>);    <span class="comment">//定义float类型的变量，用于存储总距离</span></span><br><span class="line">    System.out.println(<span class="string">"往返 AB 两地共需要行驶："</span>+total+<span class="string">" 米"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存文件并运行，输出的结果如下：<br>往返 AB 两地共需要行驶：4696.8 米</p><p>该示例中首先定义了一个类型为 double、名称为 lutu 的变量用于存储单程距离，然后定义了一个类型为 int、名称为 num 的变量用于存储经过的次数，最后定义了一个类型为 float、名称为 total 的变量用于存储总距离。</p><p>其实一个 double 类型的数据与一个 int 类型的数据相乘后得到的结果类型为 double，但是由于单程距离乘以次数为一个单精度浮点型（float 类型）的数，因此可以将总距离转换为 float 类型的数据。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/18/hello-world/"/>
      <url>/2019/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
